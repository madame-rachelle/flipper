/*
Copyright 2019-2020 Rachael Alexanderson
Uses small code snippets and ideas found in Tilt++, Copyright 2017-2019 Nash Muhandes

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// cvar flipper_method
// flipper_method & 1 = enable shader and turn reversing (the 'fake' backwards method)
// flipper_method & 2 = enable levelpostprocessor method (the vertex and line flipping method)
// flipper_method & 4 = enable sprite flipping (useful with method 1)
// flipper_method & 8 = enable playersprite flipping (weapons)

class FlipperHandler : EventHandler
{
	PlayerInfo ptr, console_ptr;
	override void UiTick()
	{
		bool viewflip = (CVar.FindCVar("flipper_method").GetInt() & 1) == 1;
		bool screenflip = (CVar.FindCVar("flipper_method").GetInt() & 8) == 8;

		if (console_ptr)
		{
			Shader.SetEnabled(ptr, "flipper", (viewflip ^ screenflip));
			Shader.SetEnabled(ptr, "flipperscene", (screenflip));
		}
	}
	override void PlayerEntered(PlayerEvent e)
	{
		ptr = players[e.PlayerNumber];
		if (e.PlayerNumber == consoleplayer)
			console_ptr = ptr;
		ptr.mo.A_GiveInventory("FlipperInventory");
	}
	override void PlayerDied(PlayerEvent e)
	{
		ptr.mo.A_TakeInventory("FlipperInventory");
	}
	override void PlayerRespawned(PlayerEvent e)
	{
		ptr = players[e.PlayerNumber];
		ptr.mo.A_GiveInventory("FlipperInventory");
	}
	override void WorldThingSpawned(WorldEvent e)
	{
		if ((CVar.FindCVar("flipper_method").GetInt() & 4) == 4)
			e.Thing.bSpriteFlip = !e.Thing.bSpriteFlip;
	}
	override void WorldLoaded(WorldEvent e)
	{
	/*	for (int i = 0; i < level.Sectors.Size(); i++)
		{
			Sector s = level.Sectors[i];
			SecSpecial ss;
			s.GetSpecial(ss);
			if (ss.special >= 40 && ss.special <= 42) // e wind
			{
				ss.special += 9;
				s.SetSpecial(ss);
			}
			else if (s.special >= 49 && s.special <= 51) // w wind
			{
				ss.special -= 9;
				s.SetSpecial(ss);
			}
			else if (s.special >= 204 && s.special <= 206) // e scroll
			{
				ss.special += 6;
				s.SetSpecial(ss);
			}
			else if (s.special >= 210 && s.special <= 212) // w scroll
			{
				ss.special -= 6;
				s.SetSpecial(ss);
			}
			else if (s.special >= 213 && s.special <= 215) // nw scroll
			{
				ss.special += 3;
				s.SetSpecial(ss);
			}
			else if (s.special >= 216 && s.special <= 218) // ne scroll
			{
				ss.special -= 3;
				s.SetSpecial(ss);
			}
			else if (s.special >= 219 && s.special <= 221) // se scroll
			{
				ss.special += 3;
				s.SetSpecial(ss);
			}
			else if (s.special >= 220 && s.special <= 222) // sw scroll
			{
				ss.special -= 3;
				s.SetSpecial(ss);
			}
		} */
	}
}

class FlipperInventory : CustomInventory
{
	double oldangle;
	bool runOnce;

	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNCLEARABLE
		+INVENTORY.AUTOACTIVATE
		
	}

	override void Tick(void)
	{
		bool RunThisTic = (CVar.FindCVar("flipper_method").GetInt() & 1) != 1;


		if (RunThisTic)
		{
			// turn it off!
			if (Owner && runOnce)
			{
				playerpawn(Owner).SideMove1 = playerpawn(Owner).default.SideMove1;
				playerpawn(Owner).SideMove2 = playerpawn(Owner).default.SideMove2;
				runOnce = false;
			}			
		}
		else
		{
			if (!runOnce)
			{
				if (Owner)
				{
					oldangle = Owner.angle;
					runOnce = true;
					if (playerpawn(Owner)) {
						playerpawn(Owner).SideMove1 = playerpawn(Owner).default.SideMove1 * -1;
						playerpawn(Owner).SideMove2 = playerpawn(Owner).default.SideMove2 * -1;
					}
				}
			}
			else
			{
				Owner.A_SetAngle(oldangle * 2 - Owner.angle, SPF_INTERPOLATE);
				oldangle = Owner.angle;
			}
		}
		Super.Tick();
	}

	States
	{
	Use:
		TNT1 A 0;
		Fail;
	Pickup:
		TNT1 A 0 { return true; }
		Stop;
	}
}

class LevelFlipper : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		{
			if ((CVar.FindCVar("flipper_method").GetInt() & 2) == 2)
			{
				for (int i = 0; i < level.vertexes.size(); i++)
				{
					double x = level.vertexes[i].p.x * -1;
					double y = level.vertexes[i].p.y;
					setVertex(i, x, y);
				}
				for (int i = 0; i < level.lines.size(); i++)
				{
					FlipLineVertexes(i);
					double lx = level.lines[i].v1.p.x - level.lines[i].v2.p.x;
					double ly = level.lines[i].v1.p.y - level.lines[i].v2.p.y;
					double length = sqrt(lx * lx + ly * ly);
					for (int s = 0; s < 2; s++)
						if (level.lines[i].sidedef[s])
							for (int p = 0; p < 3; p++)
							{
								level.lines[i].sidedef[s].SetTextureXOffset(p,
									-level.lines[i].sidedef[s].GetTextureXOffset(p) - length);
								level.lines[i].sidedef[s].MultiplyTextureXScale(p, -1.0);
							}
				}
				for (int i = 0; i < level.sectors.size(); i++)
				{
					for (int g = 0; g < 2; g++)
					{
						double sc = level.sectors[i].GetXScale(g);
						level.sectors[i].SetXScale(g, -sc);
						double sa = level.sectors[i].GetAngle(g);
						level.sectors[i].SetAngle(g, (540 - sa) % 360);
					}
				}
				for (int i = 0; i < GetThingCount(); i++) {
					Vector3 thingpos = GetThingPos(i);
					SetThingXY(i, thingpos.x * -1, thingpos.y);
					SetThingAngle(i, (540 - GetThingAngle(i)) % 360);
				}
			}
		}
	}
}
